generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(cuid())
  email          String        @unique
  hashedPassword String?
  name           String?
  avatarUrl      String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  companies      UserCompany[]
  sessions       Session[]
  accounts       Account[]
  auditLogs      AuditLog[]
}

model Company {
  id               String           @id @default(cuid())
  name             String
  rfc              String?
  country          String           @default("MX")
  timezone         String           @default("America/Mexico_City")
  facturaloApiKey  String?
  facturaloSecret  String?
  stripeCustomerId String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  users            UserCompany[]
  subscriptions    Subscription?
  invoices         Invoice[]
  proposals        Proposal[]
  expenses         Expense[]
  payrolls         Payroll[]
  auditLogs        AuditLog[]
  transactions     Transaction[]
  clients          Client[]
  providers        Provider[]
  employees        Employee[]
  concepts         Concept[]
  settings         CompanySettings?
  bankAccounts     BankAccount[]
}

model CompanySettings {
  id        String @id @default(cuid())
  companyId String @unique

  // General Settings
  companyLegalName  String?
  companyRFC        String?
  companyAddress    String?
  companyPostalCode String?
  companyPhone      String?
  companyEmail      String?
  companyWebsite    String?
  companyLogoUrl    String? // URL o path al logo

  // Fiscal Settings (Emisor CFDI)
  fiscalRegime String? // Régimen Fiscal SAT

  // FacturaloPlus Settings (Encrypted)
  facturaloApiKey  String?
  facturaloCerPEM  String? // Certificado SAT en PEM
  facturaloKeyPEM  String? // Llave privada SAT en PEM
  facturaloKeyPass String? // Contraseña de la llave privada

  // Stripe Settings (Encrypted)
  stripeSecretKey      String?
  stripePublishableKey String?
  stripeWebhookSecret  String?

  // File Storage Settings
  uploadMaxSize    Int?    @default(10485760) // 10MB default
  allowedFileTypes String? @default("pdf,xml,zip,jpg,jpeg,png")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Role {
  id          String        @id @default(cuid())
  name        String        @unique
  description String?
  permissions String        @default("{}")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  users       UserCompany[]
}

model UserCompany {
  id        String   @id @default(cuid())
  userId    String
  companyId String
  roleId    String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  company Company @relation(fields: [companyId], references: [id])
  role    Role    @relation(fields: [roleId], references: [id])

  @@unique([userId, companyId])
}

model Subscription {
  id                 String    @id @default(cuid())
  companyId          String    @unique
  plan               String
  status             String
  seats              Int       @default(1)
  stripeSubscription String?
  stripePriceId      String?
  stripeCustomerId   String?
  trialEndsAt        DateTime?
  cancelAtPeriodEnd  Boolean   @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  company  Company   @relation(fields: [companyId], references: [id])
  payments Payment[]
}

model Payment {
  id                    String    @id @default(cuid())
  subscriptionId        String
  amount                Decimal
  currency              String    @default("MXN")
  status                String
  stripeInvoiceId       String?
  stripeChargeId        String?
  stripePaymentIntentId String?
  paidAt                DateTime?
  createdAt             DateTime  @default(now())

  subscription Subscription @relation(fields: [subscriptionId], references: [id])
}

model Invoice {
  id           String    @id @default(cuid())
  companyId    String
  customerName String
  total        Decimal
  status       String    @default("draft")
  cfdiUuid     String?
  issueDate    DateTime?
  dueDate      DateTime?
  xmlUrl       String?
  pdfUrl       String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  company Company @relation(fields: [companyId], references: [id])
}

model Proposal {
  id          String  @id @default(cuid())
  companyId   String
  clientId    String
  conceptId   String  // Relación con concepto (obligatorio)
  title       String
  description String?

  // Fechas
  createdDate DateTime  @default(now()) // Fecha de creación
  sentDate    DateTime? // Fecha en que fue enviada

  // Seguimiento
  status      String              @default("sent") // draft, sent, viewed, accepted, rejected, expired
  followUps   ProposalFollowUp[] // Historial de seguimientos

  // Documentos
  attachments String? // JSON array de URLs de archivos adjuntos (PDF, imágenes, ZIP)
  notes       String?

  // Conversión a venta
  convertedToSale Boolean @default(false)
  transactionId   String? // ID del cobro/transacción generado cuando se acepta

  // Metadata
  internalNotes String?
  tags          String? // JSON array de tags

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  client  Client  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  concept Concept @relation(fields: [conceptId], references: [id], onDelete: Cascade)

  @@index([companyId, status])
  @@index([clientId])
  @@map("proposals")
}

model ProposalFollowUp {
  id         String   @id @default(cuid())
  proposalId String
  date       DateTime @default(now())
  type       String // "llamada", "correo", "whatsapp", "reunión", "otro"
  notes      String?

  createdAt DateTime @default(now())

  proposal Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)

  @@map("proposal_followups")
}

model Expense {
  id         String   @id @default(cuid())
  companyId  String
  vendor     String
  amount     Decimal
  category   String
  status     String   @default("pending")
  invoiceUrl String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  company Company @relation(fields: [companyId], references: [id])
}

model Payroll {
  id          String   @id @default(cuid())
  companyId   String
  employeeId  String?
  periodStart DateTime
  periodEnd   DateTime
  status      String   @default("draft")
  totalNet    Decimal
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  company  Company       @relation(fields: [companyId], references: [id])
  employee Employee?     @relation(fields: [employeeId], references: [id])
  loans    PayrollLoan[]
}

model PayrollLoan {
  id         String   @id @default(cuid())
  payrollId  String
  employeeId String
  amount     Decimal
  balance    Decimal
  status     String   @default("active")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  payroll Payroll @relation(fields: [payrollId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model BankAccount {
  id          String   @id @default(cuid())
  companyId   String
  name        String // Ej: "Cuenta BBVA Empresarial", "Tarjeta Santander"
  accountType String // "bank", "card", "cash", "other"
  last4       String? // Últimos 4 dígitos
  bank        String? // Nombre del banco
  currency    String   @default("MXN")
  isActive    Boolean  @default(true)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId, isActive])
  @@map("bank_accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  companyId String?
  action    String
  entity    String
  metadata  String?
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())

  user    User?    @relation(fields: [userId], references: [id])
  company Company? @relation(fields: [companyId], references: [id])
}

model Client {
  id           String  @id @default(cuid())
  companyId    String
  name         String // Nombre del contacto o representante legal
  company      String // Nombre comercial de la empresa
  razonSocial  String? // Razón social legal (para facturación)
  rfc          String?
  email        String?
  phone        String?
  address      String?

  // Campos fiscales SAT
  regimenFiscal String? // Régimen Fiscal SAT (ej: "601")
  usoCFDI       String? // Uso de CFDI (ej: "G03")
  codigoPostal  String?

  isActive  Boolean  @default(true)
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  companyRel   Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  proposals    Proposal[] // Relación inversa con Proposal

  @@index([companyId, isActive])
  @@index([rfc])
  @@map("clients")
}

model Provider {
  id        String  @id @default(cuid())
  companyId String
  name      String
  company   String
  rfc       String?
  email     String?
  phone     String?
  address   String?

  // Campos fiscales SAT
  regimenFiscal String? // Régimen Fiscal SAT
  codigoPostal  String?

  // Campos de pago
  isForeign        Boolean  @default(false) // Es extranjero (no requiere RFC)
  paymentType      String   @default("variable") // "fixed" | "variable"
  paymentAmount    Float?   // Monto de pago fijo
  paymentFrequency String?  // "weekly" | "biweekly" | "monthly" | "annual"

  isActive  Boolean  @default(true)
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  companyRel   Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@index([companyId, isActive])
  @@index([rfc])
  @@map("providers")
}

model Employee {
  id        String  @id @default(cuid())
  companyId String
  name      String
  lastName  String
  fullName  String  @default("") // Computed field for search
  rfc       String?
  curp      String?
  nss       String? // Número de Seguro Social
  email     String?
  phone     String?
  address   String?

  // Employment info
  position       String?
  department     String?
  hireDate       DateTime?
  salary         Float?
  paymentFreq    String   @default("biweekly") // weekly, biweekly, monthly
  bankAccount    String?
  clabe          String?

  // Tax info
  regimenFiscal String? // Régimen Fiscal SAT
  codigoPostal  String?

  isActive  Boolean  @default(true)
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  companyRel   Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  payrolls     Payroll[]

  @@index([companyId, isActive])
  @@index([rfc])
  @@index([fullName])
  @@map("employees")
}

model Concept {
  id            String  @id @default(cuid())
  companyId     String
  name          String
  description   String?
  defaultAmount Float?

  // Códigos SAT
  claveProdServ String? // Clave Producto/Servicio SAT
  claveUnidad   String? // Clave Unidad SAT
  objetoImp     String? // Objeto de impuestos (01, 02, 03, 04)

  // Impuestos
  tasaIVA          Float   @default(16)
  tasaRetencionISR Float   @default(0)
  tasaRetencionIVA Float   @default(0)
  ivaIncluded      Boolean @default(false) // true = IVA incluido, false = +IVA

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  companyRel   Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  proposals    Proposal[] // Relación inversa con Proposal

  @@index([companyId, isActive])
  @@map("concepts")
}

model Transaction {
  id        String @id @default(cuid())
  companyId String
  type      String @default("income") // "income" | "expense"

  // Información básica
  date        DateTime
  description String?
  amount      Decimal
  category    String?

  // Relaciones
  clientId   String?
  conceptId  String?
  providerId String?
  employeeId String?

  // Detalles de transacción
  quantity      Float?
  unitPrice     Decimal?
  subtotal      Decimal?
  iva           Decimal?
  retencionISR  Decimal?
  retencionIVA  Decimal?
  total         Decimal?

  // Proyecto
  isProject          Boolean  @default(false)
  projectName        String?
  totalProjectAmount Decimal?
  numberOfPayments   Int?
  parentProjectId    String? // ID del proyecto padre
  paymentNumber      Int? // Número de pago (1/4, 2/4, etc)

  // Facturación
  invoiceNumber     String?
  isBilled          Boolean @default(false)
  invoiceType       String? // "PPD" | "PUE"
  paymentMethod     String?
  paymentForm       String?
  paymentConditions String?
  invoiceStatus     String  @default("pending") // "pending" | "preview" | "stamped"
  invoiceXmlUrl     String?
  invoicePdfUrl     String?
  cfdiUuid          String?

  // Estados
  status        String @default("pending") // "pending" | "received" | "cancelled" | "paid"
  paymentStatus String @default("pending") // "paid" | "pending" | "debt"

  // Archivos
  paymentProofFiles String? // JSON array de URLs
  invoiceFiles      String? // JSON array de URLs

  // Cuenta bancaria
  bankAccountId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company  Company   @relation(fields: [companyId], references: [id])
  client   Client?   @relation(fields: [clientId], references: [id])
  provider Provider? @relation(fields: [providerId], references: [id])
  employee Employee? @relation(fields: [employeeId], references: [id])
  concept  Concept?  @relation(fields: [conceptId], references: [id])

  @@index([companyId])
  @@index([type])
  @@index([date])
  @@index([category])
  @@index([bankAccountId])
  @@index([paymentStatus])
  @@index([clientId])
  @@index([conceptId])
  @@index([parentProjectId])
  @@map("transactions")
}

model AuthOtp {
  id        String   @id @default(cuid())
  email     String
  code      String
  expiresAt DateTime
  attempts  Int      @default(0)
  createdAt DateTime @default(now())

  @@index([email])
  @@index([expiresAt])
}
